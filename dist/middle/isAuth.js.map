{"version":3,"sources":["../../server/middle/isAuth.js"],"names":["isAuth","req","res","next","console","log","token","body","query","headers","verify","process","env","SECRET","err","decoded","json","code","success","message","name","status","send"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA,IAAIA,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChCC,SAAQC,GAAR,CAAY,QAAZ;AACA;AACA,KAAIC,QAAQL,IAAIM,IAAJ,CAASD,KAAT,IAAkBL,IAAIO,KAAJ,CAAUF,KAA5B,IAAqCL,IAAIQ,OAAJ,CAAY,gBAAZ,CAAjD;;AAEA;AACA,KAAIH,KAAJ,EAAW;;AAEV;AACA,yBAAII,MAAJ,CAAWJ,KAAX,EAAkBK,QAAQC,GAAR,CAAYC,MAA9B,EAAsC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACvD,OAAID,GAAJ,EAAS;AACR,WAAOZ,IAAIc,IAAJ,CAAS;AACfC,WAAM,GADS;AAEfC,cAAS,KAFM;AAGfC,cAASL,IAAIM;AAHE,KAAT,CAAP;AAKA,IAND,MAMO;AACN;AACAnB,QAAIc,OAAJ,GAAcA,OAAd;AACAZ;AACA;AACD,GAZD;AAcA,EAjBD,MAiBO;;AAEN;AACA;AACA,SAAOD,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BL,SAAM,GADqB;AAE3BC,YAAS,KAFkB;AAG3BC,YAAS;AAHkB,GAArB,CAAP;AAKA;AAED,CAlCD;kBAmCenB,M","file":"isAuth.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport  'dotenv/config';\r\nlet isAuth = (req, res, next) => {\r\n\tconsole.log(\"hi thi\");\r\n\t// check header or url parameters or post parameters for token\r\n\tvar token = req.body.token || req.query.token || req.headers['x-access-token'];\r\n\r\n\t// decode token\r\n\tif (token) {\r\n\r\n\t\t// verifies secret and checks exp\r\n\t\tjwt.verify(token, process.env.SECRET, (err, decoded) => {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn res.json({\r\n\t\t\t\t\tcode: 400,\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: err.name\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// if everything is good, save to request for use in other routes\r\n\t\t\t\treq.decoded = decoded;\r\n\t\t\t\tnext();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t} else {\r\n\r\n\t\t// if there is no token\r\n\t\t// return an error\r\n\t\treturn res.status(403).send({\r\n\t\t\tcode: 403,\r\n\t\t\tsuccess: false,\r\n\t\t\tmessage: 'No token provided.'\r\n\t\t});\r\n\t}\r\n\r\n};\r\nexport default isAuth;\r\n"]}