{"version":3,"sources":["../../server/routes/signIn.js"],"names":["router","Router","use","post","req","resp","email","body","password","checkBody","optional","isEmail","notEmpty","errors","validationErrors","console","log","setHeader","send","sqlstring","query","error","result","response","compare","then","res","catch","err","module","exports"],"mappings":";;AAGA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AADA,IAAMA,SAAS,kBAAQC,MAAR,EAAf,C,CANA;AACA;AACA;;AAMAD,OAAOE,GAAP,CAAW,iCAAX;AACAF,OAAOG,IAAP,CAAY,cAAZ,EAA4B,UAACC,GAAD,EAAMC,IAAN,EAAe;;AAE1C,KAAIC,QAAQF,IAAIG,IAAJ,CAASD,KAArB;AACA,KAAIE,WAAWJ,IAAIG,IAAJ,CAASC,QAAxB;;AAGAJ,KAAIK,SAAJ,CAAc;AACb;AACA,WAAS;AACRC,aAAU,KADF;AAERC,YAAS;AAFD,GAFI;;AAOb;AACA,cAAY;AACXC,aAAU;;AADC;AARC,EAAd;AAaA,KAAIC,SAAST,IAAIU,gBAAJ,EAAb;AACA,KAAID,MAAJ,EAAY;AACX;AACAE,UAAQC,GAAR,CAAY,gBAAZ;AACAX,OAAKY,SAAL,CAAe,cAAf,EAA+B,WAA/B;AACAZ,OAAKa,IAAL,CAAWL,MAAX;AACA,EALD,MAKO;AACN,MAAIM,YAAY,mDAAhB;AACA,eAAWC,KAAX,CAAiBD,SAAjB,EAA4B,CAACb,KAAD,CAA5B,EAAqC,UAASe,KAAT,EAAgBC,MAAhB,EAAwB;AAC5D,OAAID,KAAJ,EAAW;AACV,QAAIE,WAAW;AACd,aAAQ,GADM;AAEd,gBAAW;AAFG,KAAf;AAIAlB,SAAKa,IAAL,CAAUK,QAAV;AACA,IAND,MAMO;AACN,qBAAOC,OAAP,CAAehB,QAAf,EAAyBc,MAAzB,EAAiCG,IAAjC,CAAsC,UAASC,GAAT,EAAc;AAClD,SAAIA,OAAO,IAAX,EAAiB;AAChB,UAAIH,YAAW;AACd,eAAQ,GADM;AAEd,kBAAW;AAFG,OAAf;AAIAlB,WAAKa,IAAL,CAAUK,SAAV;AACA,MAND,MAMO;AACN,UAAIA,aAAW;AACd,eAAQ,GADM;AAEd,kBAAW;AAFG,OAAf;AAIAlB,WAAKa,IAAL,CAAUK,UAAV;AACA;AACD,KAdF,EAeEI,KAfF,CAeQ,UAASC,GAAT,EAAc;AACpBb,aAAQC,GAAR,CAAY,QAAZ;AACAX,UAAKa,IAAL,CAAUU,GAAV;AACA,KAlBF;AAqBA;AACD,GA9BD;AA+BA;AACD,CA3DD;AA4DAC,OAAOC,OAAP,GAAiB9B,MAAjB","file":"signIn.js","sourcesContent":["// this is a sign in page from where user will sign in using the password and email-id ;\r\n// in req i will get email and password and i will check whether person is registered or not ...\r\n// yes send code 200 else code 404;\r\nimport express from 'express';\r\nimport connection from '../db';\r\nimport bcrypt from 'bcrypt';\r\nconst router = express.Router();\r\nimport expressvalidator from 'express-validator';\r\nrouter.use(expressvalidator());\r\nrouter.post('/user/signIn', (req, resp) => {\r\n\r\n\tlet email = req.body.email;\r\n\tlet password = req.body.password;\r\n\r\n\r\n\treq.checkBody({\r\n\t\t//email is optional and should be of correct format\r\n\t\t'email': {\r\n\t\t\toptional: false,\r\n\t\t\tisEmail: true\r\n\t\t},\r\n\r\n\t\t//password is required and should be at least 6 characters long\r\n\t\t'password': {\r\n\t\t\tnotEmpty: true,\r\n\r\n\t\t}\r\n\t});\r\n\tvar errors = req.validationErrors();\r\n\tif (errors) {\r\n\t\t//send error if request is invalid\r\n\t\tconsole.log('error are here');\r\n\t\tresp.setHeader('content-type', 'text/json');\r\n\t\tresp.send((errors));\r\n\t} else {\r\n\t\tlet sqlstring = 'SELECT user_password FROM user WHERE user_email=?'\r\n\t\tconnection.query(sqlstring, [email], function(error, result) {\r\n\t\t\tif (error) {\r\n\t\t\t\tlet response = {\r\n\t\t\t\t\t\"code\": 404,\r\n\t\t\t\t\t\"message\": \"not found\"\r\n\t\t\t\t}\r\n\t\t\t\tresp.send(response);\r\n\t\t\t} else {\r\n\t\t\t\tbcrypt.compare(password, result).then(function(res) {\r\n\t\t\t\t\t\tif (res == true) {\r\n\t\t\t\t\t\t\tlet response = {\r\n\t\t\t\t\t\t\t\t\"code\": 200,\r\n\t\t\t\t\t\t\t\t\"message\": \"can sign in \"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tresp.send(response);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tlet response = {\r\n\t\t\t\t\t\t\t\t\"code\": 404,\r\n\t\t\t\t\t\t\t\t\"message\": \"incorrect password \"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tresp.send(response);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(function(err) {\r\n\t\t\t\t\t\tconsole.log(\"error \");\r\n\t\t\t\t\t\tresp.send(err);\r\n\t\t\t\t\t});\r\n\r\n\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n});\r\nmodule.exports = router;\r\n"]}